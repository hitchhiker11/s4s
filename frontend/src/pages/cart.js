import React, { useState, useEffect, useRef } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import Header from '../components/Header';
import Footer from '../components/Footer';
import Breadcrumbs from '../components/Breadcrumbs';
import CartItem from '../components/CartItem';
import OrderSummary from '../components/OrderSummary';
import ResponsiveProductSection from '../components/ResponsiveProductSection';
import ProductCard from '../components/ProductCard';
import CartTabs from '../components/CartTabs/CartTabs';
import DeliveryInfoForm from '../components/DeliveryInfoForm/DeliveryInfoForm';
import ToastContainer from '../components/Toast/ToastContainer';
import { useBasket } from '../hooks/useBasket';
import { useToast } from '../hooks/useToast';
import { useRecentlyViewed } from '../hooks/useRecentlyViewed';
import { getBasketItemImageUrl } from '../lib/imageUtils';
import { checkStock, createOrder, getPaymentForm, getOrderStatus } from '../lib/api/bitrix';
import { normalizePhoneNumber, isValidRussianPhone } from '../lib/phone';
import styles from '../styles/pages/CartPage.module.css';

// Mock data removed - now using real recently viewed data from useRecentlyViewed hook

const breadcrumbItems = [
  { href: '/', label: '–ì–ª–∞–≤–Ω–∞—è' },
  { href: '/cart', label: '–ö–æ—Ä–∑–∏–Ω–∞' },
];

const CartPage = () => {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('cart');
  
  // Recently viewed products hook
  const { recentlyViewed, hasRecentlyViewed } = useRecentlyViewed();
  
  // All state declarations first
  const [loadingItems, setLoadingItems] = useState(new Set()); // Track which items are loading
  const [cdekDeliveryPrice, setCdekDeliveryPrice] = useState(0); // CDEK delivery price
  const [selectedDelivery, setSelectedDelivery] = useState(null); // Selected delivery info
  const [userFormData, setUserFormData] = useState({});
  
  // Order state
  const [orderId, setOrderId] = useState(null);
  const [orderNumber, setOrderNumber] = useState(null);
  const [orderTotal, setOrderTotal] = useState(null);
  const [isPaymentLoading, setIsPaymentLoading] = useState(false);
  const [isOrderLoading, setIsOrderLoading] = useState(false);
  const [isExistingOrder, setIsExistingOrder] = useState(false);
  const [isOrderStatusLoading, setIsOrderStatusLoading] = useState(false);

  // CDEK Widget state management to persist across tab switches
  const [cdekWidgetReady, setCdekWidgetReady] = useState(false);
  const [cdekScriptLoaded, setCdekScriptLoaded] = useState(false);
  
  // Toast system - –æ–±—ä—è–≤–ª—è–µ–º —Ä–∞–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ useEffect
  const { 
    toasts, 
    showSuccessToast, 
    showErrorToast, 
    removeToast 
  } = useToast();

  // Check for order_id parameter and handle existing orders
  const { order_id } = router.query;
  
  // Basket hook moved up to avoid TDZ in effects
  const {
    basketItems,
    basketData,
    basketCount,
    basketTotalPrice,
    isLoading: isBasketLoading,
    error,
    updateBasketItem,
    removeFromBasket,
    addToBasket,
    clearBasket,
    refetchBasket,
    isFuserIdInitialized,
    fuserId,
    checkStock: basketCheckStock
  } = useBasket({
    initialFetch: true,
    refetchOnWindowFocus: true,
    staleTime: 30000, // 30 seconds
    autoInitialize: true
  });

  const hasBasketItems = Array.isArray(basketItems) && basketItems.length > 0;
  // Ref to track if we've already checked stock for current basket items
  const checkedBasketItemsRef = useRef(new Set());
  
  // Load last order from localStorage if no state and on payment tab
  useEffect(() => {
    if (activeTab === 'payment' && !orderId && !orderNumber && !orderTotal && !hasBasketItems) {
      try {
        const ordersRaw = localStorage.getItem('s4s_recent_orders');
        if (ordersRaw) {
          const orders = JSON.parse(ordersRaw);
          if (Array.isArray(orders) && orders.length > 0) {
            const lastOrder = orders[0]; // –ü–µ—Ä–≤—ã–π = –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π
            console.log('üîÑ [Cart] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∏–∑ localStorage:', lastOrder);
            setOrderId(lastOrder.order_id);
            setOrderNumber(lastOrder.order_number);
            setOrderTotal(Number(lastOrder.total_amount));
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (lastOrder.customer_data) {
              const [firstName = '', lastName = ''] = (lastOrder.customer_data.name || '').split(' ');
              setUserFormData(prev => ({
                ...prev,
                firstName: firstName,
                lastName: lastName,
                phoneNumber: lastOrder.customer_data.phone || '',
                email: lastOrder.customer_data.email || '',
                comment: lastOrder.customer_data.comment || ''
              }));
            }
          }
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è [Cart] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ localStorage:', error);
      }
    }
  }, [activeTab, orderId, orderNumber, orderTotal, hasBasketItems]);
  
  useEffect(() => {
    const handleExistingOrder = async () => {
      if (!router.isReady || !order_id) return;
      
      setIsOrderStatusLoading(true);
      try {
        console.log('üîç [Cart] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞:', order_id);
        
        const orderStatus = await getOrderStatus(order_id);
        
        if (orderStatus.success && orderStatus.data) {
          const { is_paid, order_number } = orderStatus.data;
          
          if (is_paid) {
            // –ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
            console.log('‚úÖ [Cart] –ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ payment-success');
            router.push(`/payment-success?order_id=${order_id}&order_number=${order_number}`);
            return;
          } else {
            // –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É payment
            console.log('üí≥ [Cart] –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ');
            setOrderId(order_id);
            setOrderNumber(order_number);
            setIsExistingOrder(true);
            setActiveTab('payment');
          }
        } else {
          // –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
          console.error('‚ùå [Cart] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', orderStatus.error);
          showErrorToast('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
          router.push('/cart');
        }
      } catch (error) {
        console.error('‚ùå [Cart] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
        showErrorToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
        router.push('/cart');
      } finally {
        setIsOrderStatusLoading(false);
      }
    };

    handleExistingOrder();
  }, [router.isReady, order_id, router, showErrorToast]);
  
  // Check stock for all items when basket items are loaded
  useEffect(() => {
    const checkStockForCurrentBasketItems = async () => {
      if (!basketItems || basketItems.length === 0) {
        console.log('üîç [Cart] No basket items to check stock for');
        return;
      }

      // Only check stock if fuser_id is initialized and we're not currently loading
      if (!isFuserIdInitialized || isBasketLoading) {
        console.log('üîç [Cart] Skipping stock check - fuser_id not initialized or basket loading:', {
          isFuserIdInitialized,
          isBasketLoading
        });
        return;
      }

      // Create a signature for current basket state to avoid duplicate checks
      const currentBasketSignature = basketItems.map(item => `${item.id}-${item.product_id}-${item.quantity}`).join(',');
      
      // If we've already checked this exact basket state, skip
      if (checkedBasketItemsRef.current.has(currentBasketSignature)) {
        console.log('üîÑ [Cart] Skipping stock check - already checked this basket state:', currentBasketSignature);
        return;
      }

      console.log('üîç [Cart] Starting stock check for basket items:', {
        itemCount: basketItems.length,
        basketSignature: currentBasketSignature,
        items: basketItems.map(item => ({
          id: item.id,
          product_id: item.product_id,
          name: item.name,
          quantity: item.quantity
        }))
      });

      // Track items that need stock updates
      let stockUpdatesMade = false;

      for (const item of basketItems) {
        try {
          // Validate item data before stock check
          if (!item.product_id || !item.quantity || !item.id) {
            console.warn(`‚ö†Ô∏è [Cart] Skipping item with missing data:`, {
              id: item.id,
              product_id: item.product_id,
              quantity: item.quantity,
              name: item.name
            });
            continue;
          }

          const productId = parseInt(item.product_id, 10);
          const currentQuantity = parseInt(item.quantity, 10);
          const basketItemId = item.id;

          console.log(`üîç [Cart] Checking stock for item:`, {
            basketItemId,
            productId,
            currentQuantity,
            name: item.name
          });
          
          const stockResponse = await basketCheckStock(productId, currentQuantity);
          
          console.log(`üìã [Cart] Stock check response for item ${basketItemId}:`, stockResponse);
          
          if (stockResponse && stockResponse.success !== undefined) {
            const availableQuantity = parseInt(stockResponse.available_quantity, 10) || 0;
            
            if (!stockResponse.success && stockResponse.available === false) {
              if (availableQuantity === 0) {
                // Remove item completely if no stock available
                console.log(`‚ùå [Cart] Removing item ${basketItemId}: ${item.name} (no stock available)`);
                await removeFromBasket(basketItemId);
                showErrorToast(`–¢–æ–≤–∞—Ä "${item.name}" –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã`);
                stockUpdatesMade = true;
              } else if (availableQuantity > 0 && availableQuantity < currentQuantity) {
                // Update quantity to available amount
                console.log(`üîÑ [Cart] Updating item ${basketItemId} quantity from ${currentQuantity} to ${availableQuantity}`);
                await updateBasketItem(basketItemId, availableQuantity);
                showErrorToast(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ "${item.name}" –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${availableQuantity} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ)`);
                stockUpdatesMade = true;
              }
            } else if (stockResponse.success && stockResponse.available === true) {
              // Item is available in requested quantity - no action needed
              console.log(`‚úÖ [Cart] Item ${basketItemId} is available in requested quantity (${currentQuantity})`);
            }
          } else if (stockResponse && stockResponse.error) {
            // Handle API error responses
            console.error(`‚ùå [Cart] Stock check error for item ${basketItemId}:`, stockResponse.error);
            showErrorToast(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ "${item.name}": ${stockResponse.error}`);
          }
        } catch (error) {
          console.error(`‚ùå [Cart] Exception during stock check for item ${item.id}:`, error);
          showErrorToast(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ "${item.name}"`);
        }
      }
      
      // Mark this basket state as checked only if no updates were made
      // If updates were made, the useEffect will run again with new basket state
      if (!stockUpdatesMade) {
        console.log('‚úÖ [Cart] Stock check completed, marking basket state as checked:', currentBasketSignature);
        checkedBasketItemsRef.current.add(currentBasketSignature);
        
        // Clean up old signatures to prevent memory leaks (keep only last 5)
        if (checkedBasketItemsRef.current.size > 5) {
          const signatures = Array.from(checkedBasketItemsRef.current);
          checkedBasketItemsRef.current = new Set(signatures.slice(-5));
        }
      } else {
        console.log('üîÑ [Cart] Stock updates were made, will recheck with new basket state');
      }
    };

    // Only run stock check if we have basket items and basket is not currently loading
    if (basketItems && basketItems.length > 0 && !isBasketLoading && isFuserIdInitialized) {
      checkStockForCurrentBasketItems();
    }
  }, [basketItems, isBasketLoading, isFuserIdInitialized]); // ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // Fetch basket data on component mount, but only after fuser_id is initialized
  useEffect(() => {
    if (isFuserIdInitialized) {
      console.log('fuser_id initialized, fetching basket data on cart page');
      refetchBasket();
    }
  }, [refetchBasket, isFuserIdInitialized]);

  const handleTabClick = (tabId) => {
    setActiveTab(tabId);
  };

  // Handle CDEK delivery price changes
  // const handleDeliveryPriceChange = (price) => {
  //   console.log('üöö [Cart] CDEK delivery price changed:', price);
  //   setCdekDeliveryPrice(price);
  // };

  // Handle CDEK delivery selection
  const handleDeliverySelect = (deliveryData) => {
    console.log('üöö [Cart] CDEK delivery selected:', deliveryData);
    setSelectedDelivery(deliveryData);
  };

  const renderRecentlyViewedProductCard = (product) => (
    <ProductCard 
      key={product.id} 
      product={product}
    />
  );

  // Handle quantity changes for cart items
  const handleQuantityChange = async (itemId, newQuantity) => {
    console.log('üîÑ [Cart] Handling quantity change:', {
      itemId,
      newQuantity,
      newQuantityType: typeof newQuantity,
      currentBasketItems: basketItems
    });
    
    // Add item to loading set
    setLoadingItems(prev => new Set([...prev, itemId]));
    
    try {
      // Ensure numeric value for API call
      const quantity = newQuantity === '' ? 1 : Math.max(1, parseInt(newQuantity, 10) || 1);
      
      console.log('üîÑ [Cart] Processed quantity:', {
        originalQuantity: newQuantity,
        processedQuantity: quantity,
        itemId: itemId
      });
      
      await updateBasketItem(itemId, quantity);
      console.log('‚úÖ [Cart] Basket item quantity updated successfully');
    } catch (error) {
      console.error('‚ùå [Cart] Failed to update basket item quantity:', error);
      // Show error message from the thrown exception
      showErrorToast(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
    } finally {
      // Remove item from loading set
      setLoadingItems(prev => {
        const newSet = new Set(prev);
        newSet.delete(itemId);
        return newSet;
      });
    }
  };

  // Handle removing items from cart
  const handleRemoveItem = async (itemId) => {
    // Add item to loading set
    setLoadingItems(prev => new Set([...prev, itemId]));
    
    try {
      await removeFromBasket(itemId);
    } catch (error) {
      console.error('Failed to remove basket item:', error);
      showErrorToast(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    } finally {
      // Remove item from loading set
      setLoadingItems(prev => {
        const newSet = new Set(prev);
        newSet.delete(itemId);
        return newSet;
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
  const handlePayment = async () => {
    if (!orderId) {
      showErrorToast('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞');
      return;
    }
    
    setIsPaymentLoading(true);
    try {
      console.log('üí≥ [Cart] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:', orderId);
      
      const paymentResponse = await getPaymentForm(orderId);
      
      if (paymentResponse.success && paymentResponse.data) {
        const { direct_payment_url, payment_form } = paymentResponse.data;
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
        if (direct_payment_url && direct_payment_url.trim()) {
          console.log('üí≥ [Cart] –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã:', direct_payment_url);
          window.location.href = direct_payment_url;
        } else if (payment_form && payment_form.trim()) {
          console.log('üí≥ [Cart] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã');
          
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ä–º—ã
          const formContainer = document.createElement('div');
          formContainer.innerHTML = payment_form.trim();
          
          // –ò—â–µ–º —Ñ–æ—Ä–º—É –≤ HTML
          const form = formContainer.querySelector('form');
          if (form) {
            form.style.display = 'none';
            document.body.appendChild(formContainer);
            
            setTimeout(() => {
              form.submit();
              setTimeout(() => {
                if (document.body.contains(formContainer)) {
                  document.body.removeChild(formContainer);
                }
              }, 1000);
            }, 100);
          } else {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
          }
        } else {
          throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã');
        }
      } else {
        throw new Error(paymentResponse.error?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç—ã');
      }
    } catch (error) {
      console.error('‚ùå [Cart] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–ø–ª–∞—Ç–µ:', error);
      showErrorToast(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–ø–ª–∞—Ç–µ');
      setIsPaymentLoading(false);
    }
  };

  const handleProceedToCheckout = async () => {
    if (activeTab === 'cart') {
      setActiveTab('delivery');
    } else if (activeTab === 'delivery') {
      // Normalize and validate phone
      const normalizedPhone = normalizePhoneNumber(userFormData.phoneNumber || '');

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!userFormData.lastName || !userFormData.firstName || !userFormData.patronymic || !normalizedPhone || !userFormData.email) {
        showErrorToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –§–∞–º–∏–ª–∏—è, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ, –¢–µ–ª–µ—Ñ–æ–Ω, Email');
        return;
      }

      if (!isValidRussianPhone(normalizedPhone)) {
        showErrorToast('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX');
        return;
      }

      // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
      const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(userFormData.email);
      if (!emailValid) {
        showErrorToast('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
        return;
      }

      if (!selectedDelivery || (!selectedDelivery.delivery && !selectedDelivery.code)) {
        showErrorToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏');
        return;
      }
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      setIsOrderLoading(true);
      try {
        if (!fuserId) {
          throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä–∑–∏–Ω—ã');
        }
        
        const deliveryAddress = `${selectedDelivery.address?.city || ''}, ${selectedDelivery.address?.address || ''}`;
        
        const orderData = {
          fuser_id: fuserId,
          customer_name: userFormData.firstName,
          customer_lastname: userFormData.lastName || '',
          customer_middlename: userFormData.patronymic || '',
          customer_phone: normalizedPhone,
          customer_email: userFormData.email,
          cdek_code: selectedDelivery.delivery || selectedDelivery.code || '',
          delivery_address: deliveryAddress,
          comment: userFormData.comment || ''
        };
        
        console.log('üõí [Cart] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', orderData);
        
        const response = await createOrder(orderData);
        
        if (response.success) {
          const orderId = response.data.order_id;
          const orderNumber = response.data.order_number;
          const totalAmount = Number(response.data.total_amount || subtotal);
          
          setOrderId(orderId);
          setOrderNumber(orderNumber);
          setOrderTotal(totalAmount);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ localStorage (–º–∞–∫—Å–∏–º—É–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
          try {
            const newOrder = {
              order_id: orderId,
              order_number: orderNumber,
              total_amount: totalAmount,
              customer_data: {
                name: `${userFormData.firstName} ${userFormData.lastName}`,
                phone: normalizePhoneNumber(userFormData.phoneNumber || ''),
                email: userFormData.email,
                delivery_address: deliveryAddress,
                comment: userFormData.comment || ''
              },
              created_at: Date.now()
            };
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã
            const existingOrdersRaw = localStorage.getItem('s4s_recent_orders');
            let existingOrders = [];
            
            if (existingOrdersRaw) {
              try {
                existingOrders = JSON.parse(existingOrdersRaw);
                if (!Array.isArray(existingOrders)) existingOrders = [];
              } catch {
                existingOrders = [];
              }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –Ω–∞—á–∞–ª–æ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 2
            existingOrders.unshift(newOrder);
            existingOrders = existingOrders.slice(0, 2);
            
            localStorage.setItem('s4s_recent_orders', JSON.stringify(existingOrders));
            console.log('üíæ [Cart] –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:', newOrder);
          } catch (error) {
            console.warn('‚ö†Ô∏è [Cart] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ localStorage:', error);
          }
          
          showSuccessToast(`–ó–∞–∫–∞–∑ ‚Ññ${orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
          
          // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
          try {
            await clearBasket(fuserId);
            console.log('‚úÖ [Cart] –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
          } catch (clearError) {
            console.warn('‚ö†Ô∏è [Cart] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É:', clearError);
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫–∞–∑ —É–∂–µ —Å–æ–∑–¥–∞–Ω
          }
          
          setActiveTab('payment');
        } else {
          const apiMessage = response?.error?.message || response?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞';
          throw new Error(apiMessage);
        }
      } catch (error) {
        console.error('‚ùå [Cart] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        showErrorToast(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
      } finally {
        setIsOrderLoading(false);
      }
    } else if (activeTab === 'payment') {
      // –ù–∞ —à–∞–≥–µ payment –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ handlePayment
      await handlePayment();
    }
  };

  const getButtonText = () => {
    if (activeTab === 'cart') return '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é';
    if (activeTab === 'delivery') {
      return isOrderLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
    }
    if (activeTab === 'payment') {
      return isPaymentLoading ? '–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ...' : '–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑';
    }
    return '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
  };



  // Dynamic breadcrumb based on active tab
  const dynamicBreadcrumbs = [
    { name: '–ì–ª–∞–≤–Ω–∞—è', link: '/' },
    { name: '–ö–æ—Ä–∑–∏–Ω–∞', link: '/cart' },
    { 
      name: activeTab === 'cart' 
        ? '–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞' 
        : activeTab === 'delivery' 
          ? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ' 
          : '–û–ø–ª–∞—Ç–∞', 
      link: '/cart' 
    },
  ];

  // Calculate order summary values
  const shippingCost = 0; // Temporarily set to 0 as per user request
  const packagingCost = 0; // Free packaging
  
  // Use order total for payment step, basket total for other steps
  // On payment: show last-order total only when basket is empty; otherwise 0
  const subtotal = activeTab === 'payment'
    ? ((orderTotal && orderTotal > 0 && !hasBasketItems) ? Number(orderTotal) : 0)
    : (basketTotalPrice || 0);
  const total = subtotal + packagingCost; // + shippingCost; // Commented out shipping cost addition

  // Format cart items for the CartItem component
  const formattedCartItems = basketItems?.map(item => {
    // Log the raw item structure to understand what IDs we have
    console.log('üîç [Cart] Raw basket item structure:', {
      rawItem: item,
      availableIds: {
        id: item.id,
        basket_id: item.basket_id,
        basket_item_id: item.basket_item_id,
        product_id: item.product_id
      },
      available_quantity: item.available_quantity
    });
    
    // Use the correct ID for basket operations (should be basket item ID, not product ID)
    const basketItemId = item.id || item.basket_item_id || item.basket_id;
    
    // Use the new image utility for proper URL formation
    const imageUrl = getBasketItemImageUrl(item);

    // Extract brand name with multiple fallbacks
    const brandName = item.brand_name || item.BRAND_NAME || item.brand || item.BRAND || 
                     item.properties?.BREND?.value || item.properties?.BRAND_NAME?.value ||
                     'OTHER';

    // If available_quantity is not provided by the API, we can show it as available
    // since the item is in the basket (the stock check was done when adding)
    const stockToShow = item.available_quantity !== undefined && item.available_quantity !== null 
      ? item.available_quantity 
      : (item.quantity || 1); // Show at least the quantity in basket

    return {
      id: basketItemId, // Use the correct basket item ID
      imageUrl: imageUrl,
      name: item.name,
      brand: brandName,
      price: item.price,
      description: item.description || '',
      quantity: item.quantity,
      stock: stockToShow, // Always show stock information
      productLink: item.detail_page_url || `/product/${item.id}`,
      isLoading: loadingItems.has(basketItemId) // Add loading state for this item
    };
  }) || [];

  return (
    <>
      <Head>
        <title>
          {activeTab === 'cart' && '–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞ - Shop4Shoot'}
          {activeTab === 'delivery' && '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ - Shop4Shoot'}
          {activeTab === 'payment' && '–û–ø–ª–∞—Ç–∞ - Shop4Shoot'}
        </title>
        <meta name="description" content="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ Shop4Shoot" />
      </Head>
      <Header />
      <Breadcrumbs items={breadcrumbItems} />

      {/* Toast Container */}
      <ToastContainer toasts={toasts} onRemoveToast={removeToast} />

      <main className={styles.cartPageContainer}>
        <CartTabs activeTab={activeTab} onTabClick={handleTabClick} />
        
        <div className={styles.cartLayout}>
          {activeTab === 'cart' && (
            <section className={styles.cartItemsSection}>
              <h1 className={styles.mainTitle}>–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞</h1>
              {isBasketLoading && basketItems.length === 0 ? (
                <div className={styles.loaderContainer}>
                  <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</p>
                </div>
              ) : error ? (
                <div className={styles.errorContainer}>
                  <p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                </div>
              ) : formattedCartItems.length > 0 ? (
                formattedCartItems.map(item => (
                  <CartItem
                    key={item.id}
                    item={item}
                    onQuantityChange={handleQuantityChange}
                    onRemove={handleRemoveItem}
                  />
                ))
              ) : (
                <div className={styles.emptyCartContainer}>
                  <p className={styles.emptyCartMessage}>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>
                  <button 
                    className={styles.continueShoppingButton}
                    onClick={() => router.push('/catalog')}
                  >
                    –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
                  </button>
                </div>
              )}
            </section>
          )}

          {(activeTab === 'delivery' || activeTab === 'payment') && (
            <section className={styles.contentSection}>
              {activeTab === 'delivery' && (
                <>
                  <DeliveryInfoForm 
                    isActiveTab={activeTab === 'delivery'}
                    // onDeliveryPriceChange={handleDeliveryPriceChange}
                    onDeliverySelect={handleDeliverySelect}
                    onUserDataChange={setUserFormData}
                    // CDEK Widget state props
                    cdekWidgetReady={cdekWidgetReady}
                    setCdekWidgetReady={setCdekWidgetReady}
                    cdekScriptLoaded={cdekScriptLoaded}
                    setCdekScriptLoaded={setCdekScriptLoaded}
                    selectedDelivery={selectedDelivery}
                    setSelectedDelivery={setSelectedDelivery}
                  />
                </>
              )}
              {activeTab === 'payment' && (
                <>
                  {isOrderStatusLoading ? (
                    <div className={styles.loaderContainer}>
                      <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ...</p>
                    </div>
                  ) : (
                    <>
                      <h1 className={styles.mainTitle}>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</h1>
                      {orderId && (
                        <div className={styles.orderInfo}>
                          <h2 className={styles.orderInfoTitle}>
                            {isExistingOrder ? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ' : '–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω'}
                          </h2>
                          <div className={styles.orderDetails}>
                            <div className={styles.orderInfoRow}>
                              <span>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</span>
                              <strong>‚Ññ{orderNumber || orderId}</strong>
                            </div>
                            {orderTotal ? (
                              <div className={styles.orderInfoRow}>
                                <span>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</span>
                                <strong>‚ÇΩ{Number(orderTotal).toLocaleString('ru-RU')}</strong>
                              </div>
                            ) : null}

                            {!isExistingOrder && (
                              <>
                                <div className={styles.orderInfoRow}>
                                  <span>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</span>
                                  <span>{userFormData.firstName} {userFormData.lastName}</span>
                                </div>
                                <div className={styles.orderInfoRow}>
                                  <span>–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                                  <span>{userFormData.phoneNumber}</span>
                                </div>
                                <div className={styles.orderInfoRow}>
                                  <span>Email:</span>
                                  <span>{userFormData.email}</span>
                                </div>
                                {selectedDelivery && (
                                  <div className={styles.orderInfoRow}>
                                    <span>–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:</span>
                                    <span>{selectedDelivery.address?.name || '–°–î–≠–ö'}, {selectedDelivery.address?.city}, {selectedDelivery.address?.address}</span>
                                  </div>
                                )}
                                {userFormData.comment && (
                                  <div className={styles.orderInfoRow}>
                                    <span>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</span>
                                    <span>{userFormData.comment}</span>
                                  </div>
                                )}
                              </>
                            )}
                            {isExistingOrder && (
                              <div className={styles.orderInfoRow}>
                                <span>–°—Ç–∞—Ç—É—Å:</span>
                                <span>–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</span>
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                      <div className={styles.paymentInfo}>
                        <p>–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑" –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –†–æ–±–æ–∫–∞—Å—Å—ã.</p>
                      </div>
                    </>
                  )}
                </>
              )}
            </section>
          )}

          <aside className={styles.orderDetailsSection}>
             {!isOrderStatusLoading && (
               <OrderSummary
                  subtotal={subtotal}
                  packagingCost={packagingCost}
                  shippingCost={shippingCost}
                  total={total}
                  onCheckout={handleProceedToCheckout}
                  buttonText={getButtonText()}
                  isCheckoutDisabled={
                    (activeTab === 'cart' && (!formattedCartItems || formattedCartItems.length === 0)) ||
                    (activeTab === 'delivery' && isOrderLoading) ||
                    (activeTab === 'payment' && (isPaymentLoading || isExistingOrder && !orderId))
                  }
                  isLoading={isOrderLoading || isPaymentLoading}
                />
             )}
          </aside>
        </div>
      </main>

      {/* Recently Viewed Products Section */}
      {hasRecentlyViewed && (
        <ResponsiveProductSection 
          title="–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"
          subtitle=""
          viewAllLink="/catalog"
          showViewAllLink={false}
          items={recentlyViewed}
          renderItem={renderRecentlyViewedProductCard}
          useSliderOnDesktop={true} // Use slider instead of grid on desktop
          showNavigationOnDesktop={true} // Show navigation arrows on hover
          alwaysSlider={true} // Always use slider regardless of screen width
        />
      )}

      <Footer />
    </>
  );
};

export default CartPage;
