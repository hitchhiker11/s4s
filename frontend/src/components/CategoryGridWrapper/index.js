import React from 'react';
import styled from 'styled-components';
import CategoryCard from '../CategoryCard';
import { COLORS, mediaQueries } from '../../styles/tokens';

// –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
const GridContainer = styled.div`
  display: grid;
  width: 100%;
  gap: 12px; /* –°–¢–†–û–ì–û 12px –≤–µ–∑–¥–µ */
  margin-bottom: 24px;

  /* –ú–û–ë–ò–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è: 6-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —É–º–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º */
  grid-template-columns: repeat(6, 1fr);

  ${mediaQueries.sm} {
    gap: 16px; /* –°–æ—Ö—Ä–∞–Ω—è–µ–º 16px */
    margin-bottom: 32px;
  }

  ${mediaQueries.lg} {
    /* –î–ï–°–ö–¢–û–ü–ù–ê–Ø –≤–µ—Ä—Å–∏—è: 4-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–∫–∞–∫ –±—ã–ª–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ) */
    grid-template-columns: repeat(4, 1fr);
    gap: 16px; /* –°–¢–†–û–ì–û 16px */
    margin-bottom: 40px;
  }

  ${mediaQueries.xl} {
    gap: 16px; /* –°–¢–†–û–ì–û 16px */
  }
`;

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ grid
const CardGridWrapper = styled.div`
  /* –ú–û–ë–ò–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è: 6-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Ç–æ—á–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º */
  /* üö® –í–ê–ñ–ù–û: –°–¢–†–û–ì–û –¢–û–õ–¨–ö–û span 2, span 3, span 6! */
  grid-column: ${props => props.mobileGridColumn || 'span 2'};
  ${props => props.mobileGridRow ? `grid-row: ${props.mobileGridRow};` : ''}
  
  ${mediaQueries.lg} {
    /* –î–ï–°–ö–¢–û–ü–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –ø—Ä–æ—Å—Ç–æ–π 4-–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π –≥—Ä–∏–¥ */
    /* üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –í–°–ï grid —Å–≤–æ–π—Å—Ç–≤–∞ */
    grid-column: ${props => props.desktopGridColumn || 'span 1'} !important;
    grid-row: auto !important; /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π grid-row */
    /* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ - CSS Grid —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ */
  }
  
  /* –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É */
  width: 100%;
  height: 100%;
`;

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ "–í—Å–µ —Ç–æ–≤–∞—Ä—ã" —Å –æ—Å–æ–±—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
const AllProductsCard = styled(CategoryCard)`
  /* –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ */
  width: 100%;
  height: 100%;
  max-width: none;
  
  /* –û—Å–æ–±—ã–µ —Å—Ç–∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–¥–æ lg) */
  background-color: ${COLORS.primary};
  color: ${COLORS.white};
  font-weight: 700;
  
  ${mediaQueries.lg} {
    /* –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —É–±–∏—Ä–∞–µ–º –æ—Å–æ–±—ã–µ —Å—Ç–∏–ª–∏ - –¥–µ–ª–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É */
    background-color: transparent;
    color: inherit;
    font-weight: inherit;
  }
`;

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç grid-column –¥–ª—è –ú–û–ë–ò–õ–¨–ù–û–ô –≤–µ—Ä—Å–∏–∏ (6-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —É–º–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
 * –°–¢–†–û–ì–û–ï –ü–†–ê–í–ò–õ–û: –¢–æ–ª—å–∫–æ span 2, span 3, span 6 - –ù–ò–ö–û–ì–î–ê –ù–ï span 1!
 * @param {number} index - –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ (0-based)
 * @param {number} totalCount - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
 * @returns {string} - –∑–Ω–∞—á–µ–Ω–∏–µ grid-column –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
 */
const getMobileGridColumn = (index, totalCount) => {
  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–û–õ–¨–ö–û span 2, span 3, span 6!
  // –ù–ò–ö–û–ì–î–ê –ù–ï span 1 - —ç—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!
  
  let result;
  
  if (totalCount === 1) {
    // 1 –∫–∞—Ä—Ç–æ—á–∫–∞: –ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    result = 'span 6';
  } else if (totalCount === 2) {
    // 2 –∫–∞—Ä—Ç–æ—á–∫–∏: –∫–∞–∂–¥–∞—è –ø–æ 50% 
    result = 'span 3';
  } else if (totalCount === 3) {
    // 3 –∫–∞—Ä—Ç–æ—á–∫–∏: –∫–∞–∂–¥–∞—è –ø–æ 33.33% - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞!
    result = 'span 2';
  } else if (totalCount === 4) {
    // 4 –∫–∞—Ä—Ç–æ—á–∫–∏: 3√óspan2 –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, 1√óspan6 –≤–æ –≤—Ç–æ—Ä–æ–π
    if (index < 3) {
      result = 'span 2';
    } else {
      result = 'span 6';
    }
  } else if (totalCount === 5) {
    // 5 –∫–∞—Ä—Ç–æ—á–µ–∫: 3√óspan2 –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, 2√óspan3 –≤–æ –≤—Ç–æ—Ä–æ–π
    if (index < 3) {
      result = 'span 2';
    } else {
      result = 'span 3';
    }
  } else {
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (6, 7, 8, 9+):
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É, –∫–∞–∂–¥–∞—è span 2
    const cardsPerRow = 3;
    const currentRow = Math.floor(index / cardsPerRow);
    const totalRows = Math.ceil(totalCount / cardsPerRow);
    const isLastRow = currentRow === totalRows - 1;
    const cardsInLastRow = totalCount % cardsPerRow;
    
    if (isLastRow) {
      if (cardsInLastRow === 1) {
        // –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–¥–∏–Ω–æ–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        result = 'span 6';
      } else if (cardsInLastRow === 2) {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∫–∞—Ä—Ç–æ—á–∫–∏: –ø–æ 50% –∫–∞–∂–¥–∞—è
        result = 'span 3';
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–∞—Ä—Ç–æ—á–∫–∏: –ø–æ 33.33% –∫–∞–∂–¥–∞—è (–∏–ª–∏ –ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
        result = 'span 2';
      }
    } else {
      // –ü–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: –≤—Å–µ–≥–¥–∞ 3 –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ span 2
      result = 'span 2';
    }
  }
  
  return result;
};

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç grid-row –¥–ª—è –ú–û–ë–ò–õ–¨–ù–û–ô –≤–µ—Ä—Å–∏–∏ (6-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
 * @param {number} index - –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ (0-based) 
 * @param {number} totalCount - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
 * @returns {string|null} - –∑–Ω–∞—á–µ–Ω–∏–µ grid-row –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ
 */
const getMobileGridRow = (index, totalCount) => {
  // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∏
  if (totalCount === 4 && index === 3) {
    return '2'; // –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
  }
  
  if (totalCount === 5 && index >= 3) {
    return '2'; // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
  }
  
  // –î–ª—è 6+ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
  if (totalCount >= 6) {
    const cardsPerRow = 3;
    const currentRow = Math.floor(index / cardsPerRow);
    const totalRows = Math.ceil(totalCount / cardsPerRow);
    const isLastRow = currentRow === totalRows - 1;
    const cardsInLastRow = totalCount % cardsPerRow;
    
    // –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
    if (isLastRow && cardsInLastRow <= 2) {
      return `${currentRow + 1}`;
    }
  }
  
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  return null;
};

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç grid-column –¥–ª—è –î–ï–°–ö–¢–û–ü–ù–û–ô –≤–µ—Ä—Å–∏–∏ (4-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
 * @param {number} index - –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ (0-based)
 * @param {number} totalCount - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
 * @returns {string} - –∑–Ω–∞—á–µ–Ω–∏–µ grid-column –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
 */
const getDesktopGridColumn = (index, totalCount) => {
  // –î–ï–°–ö–¢–û–ü–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –ø—Ä–æ—Å—Ç–æ–π 4-–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π –≥—Ä–∏–¥
  // –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
  
  // –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 1 –∫–æ–ª–æ–Ω–∫—É –∏–∑ 4
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 4 –∫–∞—Ä—Ç–æ—á–∫–∏
  return 'span 1';
};

// –§—É–Ω–∫—Ü–∏—è getDesktopGridRow —É–¥–∞–ª–µ–Ω–∞ - –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π flow

const CategoryGridWrapper = ({ categories = [], allProductsCard = null }) => {
  const allCategories = allProductsCard ? [allProductsCard, ...categories] : categories;
  const totalCards = allCategories.length;

  return (
    <GridContainer>
      {allCategories.map((category, index) => {
        const isAllProducts = category.isAllProducts || (allProductsCard && index === 0);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∏ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        const mobileGridColumn = getMobileGridColumn(index, totalCards);
        const mobileGridRow = getMobileGridRow(index, totalCards);
        const desktopGridColumn = getDesktopGridColumn(index, totalCards);
        // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º explicit grid-row - —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π flow
        const desktopGridRow = null;
        
        // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        const baseStyles = {
          width: '100%', // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—é —à–∏—Ä–∏–Ω—É –æ–±–µ—Ä—Ç–∫–∏
          height: '100%', // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—é –≤—ã—Å–æ—Ç—É –æ–±–µ—Ä—Ç–∫–∏
          maxWidth: 'none', // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã
        };
        
        return (
          <CardGridWrapper
            key={category.id}
            title={category.title || category.name}
            mobileGridColumn={mobileGridColumn}
            mobileGridRow={mobileGridRow}
            desktopGridColumn={desktopGridColumn}
            // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º desktopGridRow - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π flow
          >
            {isAllProducts ? (
              <AllProductsCard
                title={category.title || category.name}
                imageUrl={category.imageUrl || category.image}
                link={category.link}
              />
            ) : (
              <CategoryCard
                title={category.title || category.name}
                imageUrl={category.imageUrl || category.image}
                link={category.link}
                additionalStyles={baseStyles}
              />
            )}
          </CardGridWrapper>
        );
      })}
    </GridContainer>
  );
};

export default CategoryGridWrapper; 