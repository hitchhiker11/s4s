import React, { useState } from 'react';
import styled from 'styled-components';
import CategoryGridWrapper from './index';

const DemoContainer = styled.div`
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
`;

const Section = styled.div`
  margin-bottom: 40px;
  border: 1px solid #ddd;
  padding: 20px;
  border-radius: 8px;
`;

const SectionTitle = styled.h3`
  margin-bottom: 20px;
  font-family: 'Rubik', sans-serif;
  color: #1C1C1C;
`;

const Controls = styled.div`
  margin-bottom: 20px;
  display: flex;
  gap: 10px;
  flex-wrap: wrap;
`;

const Button = styled.button`
  padding: 8px 16px;
  border: 1px solid #ccc;
  background: ${props => props.active ? '#E7194A' : 'white'};
  color: ${props => props.active ? 'white' : 'black'};
  border-radius: 4px;
  cursor: pointer;
`;

const LayoutDescription = styled.div`
  background: #f5f5f5;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  font-family: monospace;
  font-size: 14px;
  line-height: 1.5;
`;

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const generateMockCategories = (count) => {
  return Array.from({ length: count }, (_, i) => ({
    id: i + 1,
    name: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${i + 1}`,
    link: `/category/${i + 1}`,
    imageUrl: `/images/categories/cat${i + 1}.jpg`
  }));
};

const allProductsCard = {
  id: 'all',
  name: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã',
  link: '/catalog/all',
  isAllProducts: true
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
 */
const getLayoutDescription = (totalCards) => {
  const descriptions = {
    1: `1 –∫–∞—Ä—Ç–æ—á–∫–∞:
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 1: span 6 (100% —à–∏—Ä–∏–Ω—ã)`,
    
    2: `2 –∫–∞—Ä—Ç–æ—á–∫–∏:
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 1: span 3 (50% —à–∏—Ä–∏–Ω—ã)
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 2: span 3 (50% —à–∏—Ä–∏–Ω—ã)`,
    
    3: `3 –∫–∞—Ä—Ç–æ—á–∫–∏:
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 1: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 2: span 2 (33.33% —à–∏—Ä–∏–Ω—ã) 
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 3: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)`,
    
    4: `4 –∫–∞—Ä—Ç–æ—á–∫–∏:
–°—Ç—Ä–æ–∫–∞ 1:
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 1: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 2: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 3: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
–°—Ç—Ä–æ–∫–∞ 2:
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 4: span 6 (100% —à–∏—Ä–∏–Ω—ã)`,

    5: `5 –∫–∞—Ä—Ç–æ—á–µ–∫:
–°—Ç—Ä–æ–∫–∞ 1:
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 1: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 2: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 3: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
–°—Ç—Ä–æ–∫–∞ 2:
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 4: span 3 (50% —à–∏—Ä–∏–Ω—ã)
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 5: span 3 (50% —à–∏—Ä–∏–Ω—ã)`,

    6: `6 –∫–∞—Ä—Ç–æ—á–µ–∫:
–°—Ç—Ä–æ–∫–∞ 1:
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 1: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 2: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 3: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
–°—Ç—Ä–æ–∫–∞ 2:
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 4: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 5: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 6: span 2 (33.33% —à–∏—Ä–∏–Ω—ã)`,

    7: `7 –∫–∞—Ä—Ç–æ—á–µ–∫:
–°—Ç—Ä–æ–∫–∞ 1-2: 6 –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ span 2 (33.33%)
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 1-3: –°—Ç—Ä–æ–∫–∞ 1
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 4-6: –°—Ç—Ä–æ–∫–∞ 2
–°—Ç—Ä–æ–∫–∞ 3:
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 7: span 6 (100% —à–∏—Ä–∏–Ω—ã)`,

    8: `8 –∫–∞—Ä—Ç–æ—á–µ–∫:
–°—Ç—Ä–æ–∫–∞ 1-2: 6 –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ span 2 (33.33%)
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 1-3: –°—Ç—Ä–æ–∫–∞ 1
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 4-6: –°—Ç—Ä–æ–∫–∞ 2
–°—Ç—Ä–æ–∫–∞ 3:
‚îú‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 7: span 3 (50% —à–∏—Ä–∏–Ω—ã)
‚îî‚îÄ‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∞ 8: span 3 (50% —à–∏—Ä–∏–Ω—ã)`
  };

  if (totalCards > 8) {
    const fullRows = Math.floor(totalCards / 3);
    const remainder = totalCards % 3;
    
    let description = `${totalCards} –∫–∞—Ä—Ç–æ—á–µ–∫:\n`;
    description += `–°—Ç—Ä–æ–∫–∏ 1-${fullRows}: ${fullRows * 3} –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ span 2 (33.33%)\n`;
    
    if (remainder === 1) {
      description += `–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞: 1 –∫–∞—Ä—Ç–æ—á–∫–∞ span 6 (100%)`;
    } else if (remainder === 2) {
      description += `–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞: 2 –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ span 3 (50%)`;
    }
    
    return description;
  }

  return descriptions[totalCards] || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
};

const CategoryGridWrapperDemo = () => {
  const [categoryCount, setCategoryCount] = useState(5);
  const [showAllProducts, setShowAllProducts] = useState(true);

  const categories = generateMockCategories(categoryCount);
  const totalCards = showAllProducts ? categoryCount + 1 : categoryCount;

  return (
    <DemoContainer>
      <h1>CategoryGridWrapper Demo - –°—Ç—Ä–æ–≥–∞—è 6-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</h1>
      
      <Section>
        <SectionTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</SectionTitle>
        <Controls>
          <div>
            <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: </span>
            {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(count => (
              <Button 
                key={count}
                active={categoryCount === count}
                onClick={() => setCategoryCount(count)}
              >
                {count}
              </Button>
            ))}
          </div>
        </Controls>
        <Controls>
          <Button 
            active={showAllProducts}
            onClick={() => setShowAllProducts(!showAllProducts)}
          >
            {showAllProducts ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –∫–∞—Ä—Ç–æ—á–∫—É "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
          </Button>
        </Controls>
      </Section>

      <Section>
        <SectionTitle>
          –°—Ç—Ä–æ–≥–∞—è 6-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞: {totalCards} –∫–∞—Ä—Ç–æ—á–µ–∫
          {showAllProducts && ' (–≤–∫–ª—é—á–∞—è "–í—Å–µ —Ç–æ–≤–∞—Ä—ã")'}
        </SectionTitle>
        
        <LayoutDescription>
          <strong>üì± –ú–û–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø (–¥–æ lg):</strong>
          {'\n'}‚Ä¢ 6-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —É–º–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          {'\n'}‚Ä¢ Gap: —Å—Ç—Ä–æ–≥–æ 12px –≤–µ–∑–¥–µ
          {'\n'}‚Ä¢ –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫: —Ç–æ–ª—å–∫–æ span 2, span 3, span 6
          {'\n'}‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞: span 2 (33.33%)
          {'\n\n'}
          <strong>üñ•Ô∏è –î–ï–°–ö–¢–û–ü–ù–ê–Ø –í–ï–†–°–ò–Ø (lg+):</strong>
          {'\n'}‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π 4-–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π –≥—Ä–∏–¥
          {'\n'}‚Ä¢ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (span 1)
          {'\n'}‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (4 –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ä—è–¥)
          {'\n\n'}
          <strong>üìê –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ ({totalCards} –∫–∞—Ä—Ç–æ—á–µ–∫):</strong>
          {'\n'}
          {getLayoutDescription(totalCards)}
        </LayoutDescription>
        
        <CategoryGridWrapper 
          categories={categories}
          allProductsCard={showAllProducts ? allProductsCard : null}
        />
      </Section>

      <Section>
        <SectionTitle>üö® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã</SectionTitle>
        <div style={{ fontFamily: 'sans-serif', fontSize: '14px', lineHeight: '1.6' }}>
          <p><strong>‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ 1 —Ä–µ—à–µ–Ω–∞:</strong> –î–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É—é—Ç—Å—è –ø–æ 50% (span 3)</p>
          <p><strong>‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ 2 —Ä–µ—à–µ–Ω–∞:</strong> –û–¥–∏–Ω–æ–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É (span 6)</p>
          <p><strong>‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ 3 —Ä–µ—à–µ–Ω–∞:</strong> –ï–¥–∏–Ω–∞—è —Å—Ç—Ä–æ–≥–∞—è 6-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö</p>
          <p><strong>‚úÖ Gap –∏—Å–ø—Ä–∞–≤–ª–µ–Ω:</strong> –°—Ç—Ä–æ–≥–æ 12px –≤–µ–∑–¥–µ (–±—ã–ª–æ 16px-23px)</p>
        </div>
      </Section>
    </DemoContainer>
  );
};

export default CategoryGridWrapperDemo; 